name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - "*"

jobs:
  lint:
    name: lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          check-latest: true

      - name: Install X11
        run: sudo apt install libx11-dev

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v8
        with:
          args: --timeout 5m

  build:
    name: build
    needs: lint
    strategy:
      matrix:
        os: [linux, windows, darwin]
        arch: [amd64, arm64]
    runs-on: ${{ matrix.os == 'darwin' && 'macos-latest' || 'ubuntu-latest' }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          check-latest: true

      - name: Install cross-compile toolchains
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          # X11 libs for Linux builds
          if [ "${{ matrix.os }}" = "linux" ]; then
            sudo apt-get install -y libx11-dev
          fi
          # MinGW-W64 for Windows builds
          if [ "${{ matrix.os }}" = "windows" ]; then
            sudo apt-get install -y gcc-mingw-w64
          fi

      - name: Configure Windows compiler
        if: matrix.os == 'windows'
        run: |
          if [ "${{ matrix.arch }}" = "amd64" ]; then
            echo "CC=x86_64-w64-mingw32-gcc" >> $GITHUB_ENV
            echo "CXX=x86_64-w64-mingw32-g++" >> $GITHUB_ENV
          else
            echo "CC=aarch64-w64-mingw32-gcc" >> $GITHUB_ENV
            echo "CXX=aarch64-w64-mingw32-g++" >> $GITHUB_ENV
          fi

      - name: Build
        env:
          CGO_ENABLED: 1
        run: |
          mkdir -p bin
          VERSION=$(git rev-parse --short HEAD)
          PKG="."
          OUT="./bin/donezo-${GOOS}-${GOARCH}"
          if [ "$GOOS" = "windows" ]; then
            OUT="${OUT}.exe"
          fi
          go build \
            -ldflags="-s -w -X main.Version=${VERSION}" \
            -o "$OUT" \
            "$PKG"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: "donezo-${{ matrix.os }}-${{ matrix.arch }}"
          path: bin/*
