// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: board.sql

package repository

import (
	"context"
)

const createBoard = `-- name: CreateBoard :one
INSERT INTO boards (
  name
) VALUES (
  ?
)
RETURNING id, name, created_at, last_updated_at
`

func (q *Queries) CreateBoard(ctx context.Context, name string) (Board, error) {
	row := q.db.QueryRowContext(ctx, createBoard, name)
	var i Board
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.LastUpdatedAt,
	)
	return i, err
}

const deleteBoardByID = `-- name: DeleteBoardByID :exec
DELETE FROM boards
WHERE id = ?
`

func (q *Queries) DeleteBoardByID(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteBoardByID, id)
	return err
}

const getBoardByID = `-- name: GetBoardByID :one
SELECT id, name, created_at, last_updated_at FROM boards
WHERE id = ? LIMIT 1
`

func (q *Queries) GetBoardByID(ctx context.Context, id int64) (Board, error) {
	row := q.db.QueryRowContext(ctx, getBoardByID, id)
	var i Board
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.LastUpdatedAt,
	)
	return i, err
}

const listBoards = `-- name: ListBoards :many
SELECT id, name, created_at, last_updated_at FROM boards
ORDER BY id
`

func (q *Queries) ListBoards(ctx context.Context) ([]Board, error) {
	rows, err := q.db.QueryContext(ctx, listBoards)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Board
	for rows.Next() {
		var i Board
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.LastUpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBoardByID = `-- name: UpdateBoardByID :one
UPDATE boards
SET name = ?,
last_updated_at = CURRENT_TIMESTAMP
WHERE boards.id = ?
RETURNING id, name, created_at, last_updated_at
`

type UpdateBoardByIDParams struct {
	Name string `json:"name"`
	ID   int64  `json:"id"`
}

func (q *Queries) UpdateBoardByID(ctx context.Context, arg UpdateBoardByIDParams) (Board, error) {
	row := q.db.QueryRowContext(ctx, updateBoardByID, arg.Name, arg.ID)
	var i Board
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.LastUpdatedAt,
	)
	return i, err
}
